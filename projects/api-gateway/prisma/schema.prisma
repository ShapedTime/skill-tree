generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// SIMPLIFIED MVP SCHEMA - 4 MODELS
// =====================================

// User model with embedded profile data
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique @db.VarChar(50)
  passwordHash  String

  // Basic profile information
  firstName     String?   @db.VarChar(100)
  lastName      String?   @db.VarChar(100)
  avatarUrl     String?
  bio           String?   @db.Text
  timezone      String?   @default("UTC")

  // Gamification (embedded from UserProfile)
  totalXp       Int       @default(0)
  currentLevel  Int       @default(1)

  // Status flags
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLoginAt   DateTime?

  // Relationships
  skillProgress UserSkillProgress[]
  refreshTokens RefreshToken[]

  // Audit fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([email], name: "idx_user_email")
  @@index([username], name: "idx_user_username")
  @@map("users")
}

// Skill Tree model (simplified)
model SkillTree {
  id               String  @id @default(cuid())
  name             String  @db.VarChar(200)
  slug             String  @unique @db.VarChar(200)
  description      String? @db.Text
  shortDescription String? @db.VarChar(300)

  // Metadata
  difficulty       DifficultyLevel @default(BEGINNER)
  estimatedHours   Float?
  tags             String[]

  // Visual configuration (simplified)
  layoutConfig     Json    @default("{}")

  // Status flags
  isPublished      Boolean @default(false)
  isFeatured       Boolean @default(false)

  // Relationships
  skills           Skill[]
  userProgress     UserSkillProgress[]

  // Audit fields
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([slug], name: "idx_tree_slug")
  @@index([isPublished], name: "idx_tree_published")
  @@map("skill_trees")
}

// Skill model (simplified with dependency array)
model Skill {
  id               String  @id @default(cuid())
  skillTreeId      String

  // Core skill data
  name             String  @db.VarChar(200)
  description      String? @db.Text

  // Skill metadata
  difficulty       DifficultyLevel @default(BEGINNER)
  estimatedMinutes Int?
  xpValue          Int     @default(10)

  // Simple dependency management
  dependencies     String[] // Array of skill IDs that must be completed first

  // Visual positioning
  positionX        Float   @default(0)
  positionY        Float   @default(0)

  // Content (simplified)
  content          Json?   // Rich content structure

  // Status flags
  isActive         Boolean @default(true)
  isMilestone      Boolean @default(false)

  // Relationships
  skillTree        SkillTree @relation(fields: [skillTreeId], references: [id], onDelete: Cascade)
  userProgress     UserSkillProgress[]

  // Audit fields
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([skillTreeId, isActive], name: "idx_skill_tree_active")
  @@index([dependencies], type: Gin, name: "idx_skill_dependencies")
  @@map("skills")
}

// User progress tracking (simplified)
model UserSkillProgress {
  id               String   @id @default(cuid())
  userId           String
  skillId          String
  skillTreeId      String   // Denormalized for performance

  // Progress data
  status           SkillProgressStatus @default(LOCKED)
  progressPercent  Float    @default(0) // 0.0 to 100.0

  // Time tracking
  timeSpentMinutes Int      @default(0)

  // Completion data
  completionScore  Float?   // For assessed skills

  // Timestamps
  startedAt        DateTime?
  completedAt      DateTime?
  lastActivityAt   DateTime?

  // Relationships
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill            Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillTree        SkillTree @relation(fields: [skillTreeId], references: [id], onDelete: Cascade)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([userId, skillId], name: "unique_user_skill_progress")
  @@index([userId, status], name: "idx_user_skill_status")
  @@index([skillTreeId, userId], name: "idx_tree_user_progress")
  @@map("user_skill_progress")
}

// =====================================
// ENUMS (Essential only)
// =====================================

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum SkillProgressStatus {
  LOCKED         // Prerequisites not met
  AVAILABLE      // Can be started
  IN_PROGRESS    // Currently working on
  COMPLETED      // Successfully completed
}

// Refresh token model for JWT refresh functionality
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token], name: "idx_refresh_token")
  @@index([userId], name: "idx_refresh_user")
  @@index([expiresAt], name: "idx_refresh_expires")
  @@map("refresh_tokens")
}