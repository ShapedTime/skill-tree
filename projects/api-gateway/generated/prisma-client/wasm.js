
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  avatarUrl: 'avatarUrl',
  bio: 'bio',
  timezone: 'timezone',
  totalXp: 'totalXp',
  currentLevel: 'currentLevel',
  isActive: 'isActive',
  emailVerified: 'emailVerified',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillTreeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  difficulty: 'difficulty',
  estimatedHours: 'estimatedHours',
  tags: 'tags',
  layoutConfig: 'layoutConfig',
  isPublished: 'isPublished',
  isFeatured: 'isFeatured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  skillTreeId: 'skillTreeId',
  name: 'name',
  description: 'description',
  difficulty: 'difficulty',
  estimatedMinutes: 'estimatedMinutes',
  xpValue: 'xpValue',
  dependencies: 'dependencies',
  positionX: 'positionX',
  positionY: 'positionY',
  content: 'content',
  isActive: 'isActive',
  isMilestone: 'isMilestone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSkillProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillId: 'skillId',
  skillTreeId: 'skillTreeId',
  status: 'status',
  progressPercent: 'progressPercent',
  timeSpentMinutes: 'timeSpentMinutes',
  completionScore: 'completionScore',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  lastActivityAt: 'lastActivityAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.DifficultyLevel = exports.$Enums.DifficultyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

exports.SkillProgressStatus = exports.$Enums.SkillProgressStatus = {
  LOCKED: 'LOCKED',
  AVAILABLE: 'AVAILABLE',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

exports.Prisma.ModelName = {
  User: 'User',
  SkillTree: 'SkillTree',
  Skill: 'Skill',
  UserSkillProgress: 'UserSkillProgress',
  RefreshToken: 'RefreshToken'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/teymur/skill-tree/projects/api-gateway/generated/prisma-client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/teymur/skill-tree/projects/api-gateway/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma-client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// =====================================\n// SIMPLIFIED MVP SCHEMA - 4 MODELS\n// =====================================\n\n// User model with embedded profile data\nmodel User {\n  id           String @id @default(cuid())\n  email        String @unique\n  username     String @unique @db.VarChar(50)\n  passwordHash String\n\n  // Basic profile information\n  firstName String? @db.VarChar(100)\n  lastName  String? @db.VarChar(100)\n  avatarUrl String?\n  bio       String? @db.Text\n  timezone  String? @default(\"UTC\")\n\n  // Gamification (embedded from UserProfile)\n  totalXp      Int @default(0)\n  currentLevel Int @default(1)\n\n  // Status flags\n  isActive      Boolean   @default(true)\n  emailVerified Boolean   @default(false)\n  lastLoginAt   DateTime?\n\n  // Relationships\n  skillProgress UserSkillProgress[]\n  refreshTokens RefreshToken[]\n\n  // Audit fields\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([email], name: \"idx_user_email\")\n  @@index([username], name: \"idx_user_username\")\n  @@map(\"users\")\n}\n\n// Skill Tree model (simplified)\nmodel SkillTree {\n  id               String  @id @default(cuid())\n  name             String  @db.VarChar(200)\n  slug             String  @unique @db.VarChar(200)\n  description      String? @db.Text\n  shortDescription String? @db.VarChar(300)\n\n  // Metadata\n  difficulty     DifficultyLevel @default(BEGINNER)\n  estimatedHours Float?\n  tags           String[]\n\n  // Visual configuration (simplified)\n  layoutConfig Json @default(\"{}\")\n\n  // Status flags\n  isPublished Boolean @default(false)\n  isFeatured  Boolean @default(false)\n\n  // Relationships\n  skills       Skill[]\n  userProgress UserSkillProgress[]\n\n  // Audit fields\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([slug], name: \"idx_tree_slug\")\n  @@index([isPublished], name: \"idx_tree_published\")\n  @@map(\"skill_trees\")\n}\n\n// Skill model (simplified with dependency array)\nmodel Skill {\n  id          String @id @default(cuid())\n  skillTreeId String\n\n  // Core skill data\n  name        String  @db.VarChar(200)\n  description String? @db.Text\n\n  // Skill metadata\n  difficulty       DifficultyLevel @default(BEGINNER)\n  estimatedMinutes Int?\n  xpValue          Int             @default(10)\n\n  // Simple dependency management\n  dependencies String[] // Array of skill IDs that must be completed first\n\n  // Visual positioning\n  positionX Float @default(0)\n  positionY Float @default(0)\n\n  // Content (simplified)\n  content Json? // Rich content structure\n\n  // Status flags\n  isActive    Boolean @default(true)\n  isMilestone Boolean @default(false)\n\n  // Relationships\n  skillTree    SkillTree           @relation(fields: [skillTreeId], references: [id], onDelete: Cascade)\n  userProgress UserSkillProgress[]\n\n  // Audit fields\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([skillTreeId, isActive], name: \"idx_skill_tree_active\")\n  @@index([dependencies], type: Gin, name: \"idx_skill_dependencies\")\n  @@map(\"skills\")\n}\n\n// User progress tracking (simplified)\nmodel UserSkillProgress {\n  id          String @id @default(cuid())\n  userId      String\n  skillId     String\n  skillTreeId String // Denormalized for performance\n\n  // Progress data\n  status          SkillProgressStatus @default(LOCKED)\n  progressPercent Float               @default(0) // 0.0 to 100.0\n\n  // Time tracking\n  timeSpentMinutes Int @default(0)\n\n  // Completion data\n  completionScore Float? // For assessed skills\n\n  // Timestamps\n  startedAt      DateTime?\n  completedAt    DateTime?\n  lastActivityAt DateTime?\n\n  // Relationships\n  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)\n  skillTree SkillTree @relation(fields: [skillTreeId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([userId, skillId], name: \"unique_user_skill_progress\")\n  @@index([userId, status], name: \"idx_user_skill_status\")\n  @@index([skillTreeId, userId], name: \"idx_tree_user_progress\")\n  @@map(\"user_skill_progress\")\n}\n\n// =====================================\n// ENUMS (Essential only)\n// =====================================\n\nenum DifficultyLevel {\n  BEGINNER\n  INTERMEDIATE\n  ADVANCED\n  EXPERT\n}\n\nenum SkillProgressStatus {\n  LOCKED // Prerequisites not met\n  AVAILABLE // Can be started\n  IN_PROGRESS // Currently working on\n  COMPLETED // Successfully completed\n}\n\n// Refresh token model for JWT refresh functionality\nmodel RefreshToken {\n  id        String   @id @default(cuid())\n  token     String   @unique\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n\n  @@index([token], name: \"idx_refresh_token\")\n  @@index([userId], name: \"idx_refresh_user\")\n  @@map(\"refresh_tokens\")\n}\n",
  "inlineSchemaHash": "0119442d014cab8efe87f88cd1cd462b48df4035938ed6ec0f21c89b3d72ff25",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timezone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalXp\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currentLevel\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"skillProgress\",\"kind\":\"object\",\"type\":\"UserSkillProgress\",\"relationName\":\"UserToUserSkillProgress\"},{\"name\":\"refreshTokens\",\"kind\":\"object\",\"type\":\"RefreshToken\",\"relationName\":\"RefreshTokenToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"users\"},\"SkillTree\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shortDescription\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"enum\",\"type\":\"DifficultyLevel\"},{\"name\":\"estimatedHours\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"layoutConfig\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isPublished\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isFeatured\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"skills\",\"kind\":\"object\",\"type\":\"Skill\",\"relationName\":\"SkillToSkillTree\"},{\"name\":\"userProgress\",\"kind\":\"object\",\"type\":\"UserSkillProgress\",\"relationName\":\"SkillTreeToUserSkillProgress\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"skill_trees\"},\"Skill\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skillTreeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"enum\",\"type\":\"DifficultyLevel\"},{\"name\":\"estimatedMinutes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"xpValue\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"dependencies\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"positionX\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"positionY\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isMilestone\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"skillTree\",\"kind\":\"object\",\"type\":\"SkillTree\",\"relationName\":\"SkillToSkillTree\"},{\"name\":\"userProgress\",\"kind\":\"object\",\"type\":\"UserSkillProgress\",\"relationName\":\"SkillToUserSkillProgress\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"skills\"},\"UserSkillProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skillId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"skillTreeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SkillProgressStatus\"},{\"name\":\"progressPercent\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"timeSpentMinutes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"completionScore\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastActivityAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserSkillProgress\"},{\"name\":\"skill\",\"kind\":\"object\",\"type\":\"Skill\",\"relationName\":\"SkillToUserSkillProgress\"},{\"name\":\"skillTree\",\"kind\":\"object\",\"type\":\"SkillTree\",\"relationName\":\"SkillTreeToUserSkillProgress\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"user_skill_progress\"},\"RefreshToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RefreshTokenToUser\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"refresh_tokens\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

