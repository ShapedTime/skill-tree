
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  avatarUrl: 'avatarUrl',
  isActive: 'isActive',
  emailVerified: 'emailVerified',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  userId: 'userId',
  bio: 'bio',
  location: 'location',
  website: 'website',
  timezone: 'timezone',
  learningGoals: 'learningGoals',
  interests: 'interests',
  preferences: 'preferences',
  totalXp: 'totalXp',
  currentLevel: 'currentLevel',
  currentStreak: 'currentStreak',
  maxStreak: 'maxStreak',
  lastActivityAt: 'lastActivityAt',
  skillsCompleted: 'skillsCompleted',
  hoursLearned: 'hoursLearned',
  treesStarted: 'treesStarted',
  treesCompleted: 'treesCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  color: 'color',
  icon: 'icon',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillTreeScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  difficulty: 'difficulty',
  estimatedHours: 'estimatedHours',
  prerequisites: 'prerequisites',
  tags: 'tags',
  version: 'version',
  layoutConfig: 'layoutConfig',
  themeConfig: 'themeConfig',
  isPublished: 'isPublished',
  isFeatured: 'isFeatured',
  isAiGenerated: 'isAiGenerated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  skillTreeId: 'skillTreeId',
  parentSkillId: 'parentSkillId',
  name: 'name',
  shortName: 'shortName',
  description: 'description',
  learningObjectives: 'learningObjectives',
  skillType: 'skillType',
  difficulty: 'difficulty',
  estimatedMinutes: 'estimatedMinutes',
  xpValue: 'xpValue',
  dependencies: 'dependencies',
  dependents: 'dependents',
  positionX: 'positionX',
  positionY: 'positionY',
  nodeSize: 'nodeSize',
  content: 'content',
  resources: 'resources',
  assessments: 'assessments',
  isActive: 'isActive',
  isOptional: 'isOptional',
  isMilestone: 'isMilestone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.UserSkillTreeProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillTreeId: 'skillTreeId',
  status: 'status',
  progressPercent: 'progressPercent',
  skillsCompleted: 'skillsCompleted',
  totalSkills: 'totalSkills',
  timeSpentMinutes: 'timeSpentMinutes',
  startedAt: 'startedAt',
  lastActivityAt: 'lastActivityAt',
  completedAt: 'completedAt',
  milestonesReached: 'milestonesReached',
  currentPath: 'currentPath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSkillProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillId: 'skillId',
  skillTreeId: 'skillTreeId',
  status: 'status',
  progressPercent: 'progressPercent',
  timeSpentMinutes: 'timeSpentMinutes',
  attemptsCount: 'attemptsCount',
  completionMethod: 'completionMethod',
  completionScore: 'completionScore',
  evidenceData: 'evidenceData',
  unlockedAt: 'unlockedAt',
  startedAt: 'startedAt',
  lastActivityAt: 'lastActivityAt',
  completedAt: 'completedAt',
  strugglingIndicators: 'strugglingIndicators',
  engagementScore: 'engagementScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  criteria: 'criteria',
  xpReward: 'xpReward',
  badgeIcon: 'badgeIcon',
  badgeColor: 'badgeColor',
  rarity: 'rarity',
  isVisible: 'isVisible',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  earnedAt: 'earnedAt',
  progress: 'progress',
  metadata: 'metadata'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  startedAt: 'startedAt',
  lastActivityAt: 'lastActivityAt',
  endedAt: 'endedAt',
  isActive: 'isActive'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.DifficultyLevel = exports.$Enums.DifficultyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

exports.SkillType = exports.$Enums.SkillType = {
  KNOWLEDGE: 'KNOWLEDGE',
  PRACTICAL: 'PRACTICAL',
  PROJECT: 'PROJECT',
  ASSESSMENT: 'ASSESSMENT',
  MILESTONE: 'MILESTONE'
};

exports.TreeProgressStatus = exports.$Enums.TreeProgressStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  PAUSED: 'PAUSED'
};

exports.SkillProgressStatus = exports.$Enums.SkillProgressStatus = {
  LOCKED: 'LOCKED',
  AVAILABLE: 'AVAILABLE',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  SKIPPED: 'SKIPPED'
};

exports.CompletionMethod = exports.$Enums.CompletionMethod = {
  MANUAL: 'MANUAL',
  ASSESSMENT: 'ASSESSMENT',
  PROJECT: 'PROJECT',
  TIME_BASED: 'TIME_BASED',
  EXTERNAL: 'EXTERNAL'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  PROGRESS: 'PROGRESS',
  STREAK: 'STREAK',
  EXPLORATION: 'EXPLORATION',
  MASTERY: 'MASTERY',
  SOCIAL: 'SOCIAL',
  TIME: 'TIME'
};

exports.AchievementRarity = exports.$Enums.AchievementRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  LEGENDARY: 'LEGENDARY'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  SkillCategory: 'SkillCategory',
  SkillTree: 'SkillTree',
  Skill: 'Skill',
  UserSkillTreeProgress: 'UserSkillTreeProgress',
  UserSkillProgress: 'UserSkillProgress',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  UserSession: 'UserSession'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
